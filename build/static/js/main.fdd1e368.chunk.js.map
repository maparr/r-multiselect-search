{"version":3,"sources":["theme/theme.ts","components/Card.tsx","components/Search.tsx","containers/Main.tsx","store/models/product.ts","store/root.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Theme","createMuiTheme","palette","primary","main","light","dark","warning","secondary","text","background","default","paper","red","blue","cyan","teal","useStyles","makeStyles","theme","root","maxWidth","margin","spacing","Card","title","image","price","classes","className","CardActionArea","CardMedia","component","alt","height","CardContent","Typography","gutterBottom","variant","CardActions","Button","size","color","flexGrow","padding","backgroundColor","fade","search","position","borderRadius","shape","common","white","marginLeft","width","breakpoints","up","searchIcon","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","Search","onChange","InputBase","placeholder","input","inputProps","Main","observer","store","handleSearch","useCallback","e","setSearchTitle","target","value","setPage","handlePagination","_","page","useEffect","fetchProducts","foundProducts","filteredProducts","searchTitle","total","length","products","Grid","container","direction","justify","item","xs","map","product","key","id","Box","p","Pagination","count","Product","types","model","string","array","number","actions","self","fetchProductsSuccess","data","pageItems","code","brandName","imageURLs","fetchProductsError","error","console","log","fetch","then","response","json","catch","index","views","start","filter","toLowerCase","includes","slice","storeInstance","observable","box","set","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fdd1e368.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\nimport red from '@material-ui/core/colors/red'\nimport blue from '@material-ui/core/colors/blue'\nimport cyan from '@material-ui/core/colors/cyan'\nimport teal from '@material-ui/core/colors/teal'\n\nexport const Theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#2E6EC1',\n            light: '#FFFFFF',\n            dark: '#2E6EC1',\n        },\n        warning: {\n            main: '#F95252',\n        },\n        secondary: {\n            main: '#FE6B8B',\n            light: '#CCCCCC',\n            '100': '#FFDFE1',\n        },\n        text: {\n            primary: '#31353D',\n        },\n        background: {\n            default: '#DCEBFF',\n            paper: '#FFFFFF',\n        },\n    },\n})\n\nexport const Colors = {\n    red,\n    blue,\n    cyan,\n    teal,\n}\n","import React, { FC } from 'react'\nimport {\n    Card as UICard,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Button,\n    Typography,\n    makeStyles\n} from \"@material-ui/core\";\nimport {Product} from \"../store\";\n\ninterface CardProps extends Product{\n\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 345,\n        margin: theme.spacing(2,2,0,0),\n\n    },\n}));\n\n\nexport const Card: FC<CardProps> = ({ title, image, price }) => {\n    const classes = useStyles();\n\n    return (\n        <UICard className={classes.root}>\n            <CardActionArea>\n                <CardMedia\n                    component=\"img\"\n                    alt={title}\n                    height=\"140\"\n                    image={image}\n                    title={title}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {price}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\">\n                    {title}\n                </Button>\n            </CardActions>\n        </UICard>\n    );\n}\n","import React, {FC} from 'react'\nimport {\n    InputBase,\n    fade,\n    makeStyles,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\ninterface SearchProps {\n    onChange(e: any): void\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n        backgroundColor: fade(theme.palette.primary.light, 0.25),\n    },\n    search: {\n        position: \"relative\",\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        \"&:hover\": {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: \"100%\",\n        [theme.breakpoints.up(\"sm\")]: {\n            marginLeft: theme.spacing(1),\n            width: \"auto\",\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: \"100%\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    inputRoot: {\n        color: \"inherit\",\n        width: '100%'\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create(\"width\"),\n        width: \"100%\",\n    },\n}));\n\n\nexport const Search: FC<SearchProps> = ({ onChange }) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.search}>\n                <div className={classes.searchIcon}>\n                    <SearchIcon />\n                </div>\n                <InputBase\n                    placeholder=\"Searchâ€¦\"\n                    classes={{\n                        root: classes.inputRoot,\n                        input: classes.inputInput,\n                    }}\n                    inputProps={{ \"aria-label\": \"search\" }}\n                    onChange={onChange}\n                />\n            </div>\n        </div>\n    );\n}\n","import React, {FC, useCallback, useEffect} from 'react'\nimport {observer} from \"mobx-react\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n    Search,\n    Card\n} from \"../components\";\nimport {Product} from \"../store\";\n\ninterface MainProps {\n    store: any\n}\n\nexport const Main: FC<MainProps> = observer(({store}) => {\n\n    const handleSearch = useCallback((e) => {\n        store.setSearchTitle(e.target.value);\n        store.setPage(1);\n    }, [store.setSearchTitle, store.setPage]);\n\n    const handlePagination = useCallback((_, page) => {\n        store.setPage(page);\n    }, [store.setPage]);\n\n    useEffect(() => {\n        store.fetchProducts();\n    }, [store.fetchProducts]);\n\n    const foundProducts = store\n        .filteredProducts(store.searchTitle, store.page);\n\n    const total = (store.searchTitle\n        ? foundProducts.length\n        : store.products.length) / 10\n\n\n    return (\n        <>\n            <Search onChange={handleSearch}/>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid container item xs={12} spacing={3}\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                >\n                    {foundProducts\n                        .map((product: Product) => (\n                            <Card key={product.id} {...product} />\n                        ))}\n                </Grid>\n            </Grid>\n\n            <Box\n                p={3}\n                display=\"flex\"\n                justifyContent=\"center\"\n\n            >\n                {total > 1\n                    ? (\n                        <Pagination\n                            page={store.page}\n                            count={total}\n                            onChange={handlePagination}\n                        />\n                    )\n                    : null}\n            </Box>\n        </>\n    )\n})\n","import { types } from \"mobx-state-tree\";\n\nexport const Product = types.model(\"Product\", {\n    id: types.string,\n    image: types.string,\n    title: types.string,\n    price: types.string,\n});\n\n","import {types} from \"mobx-state-tree\";\nimport {Product} from \"./models\";\nimport {Page} from \"./types\";\n\nexport interface Product {\n    id: string,\n    title: string,\n    image: string,\n    price: number\n}\n\n\nexport const root = types\n    .model({\n        products: types.array(Product),\n        page: types.number,\n        searchTitle: types.string\n    })\n    .actions((self: any) => ({\n        fetchProductsSuccess(data: Page) {\n            self.products = data.pageItems.map((item) => ({\n                id: item.code,\n                title: item.brandName,\n                image: item.imageURLs[0],\n                price: item.price,\n            }));\n        },\n        fetchProductsError(error: Error) {\n            console.log(error);\n        },\n        fetchProducts() {\n            fetch(\"https://raw.githubusercontent.com/traa/apiplp/master/db.json\")\n                .then((response) => response.json())\n                .then(self.fetchProductsSuccess)\n                .catch(self.fetchProductsError);\n        },\n        setPage(index: number) {\n            self.page = index;\n        },\n        setSearchTitle(search: string) {\n            self.searchTitle = search;\n        }\n    }))\n    .views((self) => ({\n        filteredProducts(title: string, page: number) {\n            const start = (page - 1) * 10;\n            const filtered = title\n                ? self.products.filter((product) =>\n                    product.title.toLowerCase().includes(title.toLowerCase())\n                )\n                : self.products;\n\n            return filtered.slice(start, start + 10);\n        },\n    }));\n\n","import React from 'react';\nimport {ThemeProvider, CssBaseline} from '@material-ui/core'\nimport {Theme} from \"./theme\";\nimport {Main} from \"./containers\";\nimport {observable} from \"mobx\";\nimport { root } from './store';\n\n\n\nconst storeInstance = observable.box<object | null>(null);\nconst store = root.create({\n    products: [],\n    page: 1,\n    searchTitle: ''\n})\nstoreInstance.set(store as any);\n\nfunction App() {\n    return (\n        <ThemeProvider theme={Theme}>\n            <CssBaseline/>\n            <Main store={store}/>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}